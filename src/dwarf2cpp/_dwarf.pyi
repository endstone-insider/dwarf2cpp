from __future__ import annotations

import enum

__all__: list[str] = [
    "AccessAttribute",
    "DWARFAttribute",
    "DWARFContext",
    "DWARFDie",
    "DWARFFormValue",
    "DWARFTypePrinter",
    "DWARFUnit",
    "InlineAttribute",
    "VirtualityAttribute",
]

class AccessAttribute(enum.IntEnum):
    PUBLIC = 1
    PROTECTED = 2
    PRIVATE = 3

class DWARFAttribute:
    @property
    def byte_size(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def offset(self) -> int: ...
    @property
    def value(self) -> DWARFFormValue: ...

class DWARFContext:
    def __init__(self, path: str) -> None: ...
    @property
    def compile_units(self) -> list[DWARFUnit]: ...
    @property
    def cu_addr_size(self) -> int: ...
    @property
    def info_section_units(self) -> list[DWARFUnit]: ...
    @property
    def is_little_endian(self) -> bool: ...
    @property
    def max_dwo_version(self) -> int: ...
    @property
    def max_version(self) -> int: ...
    @property
    def num_compile_units(self) -> int: ...
    @property
    def num_dwo_compile_units(self) -> int: ...
    @property
    def num_dwo_type_units(self) -> int: ...
    @property
    def num_type_units(self) -> int: ...
    @property
    def types_section_units(self) -> list[DWARFUnit]: ...

class DWARFDie:
    def __eq__(self, value: DWARFDie) -> bool: ...
    def __hash__(self) -> int: ...
    def dump(self) -> str: ...
    def find(self, attribute: str) -> DWARFFormValue | None: ...
    def resolve_type_unit_reference(self) -> DWARFDie | None: ...
    @property
    def attributes(self) -> list[DWARFAttribute]: ...
    @property
    def children(self) -> list[DWARFDie]: ...
    @property
    def decl_file(self) -> str | None: ...
    @property
    def decl_line(self) -> int: ...
    @property
    def linkage_name(self) -> str: ...
    @property
    def offset(self) -> int: ...
    @property
    def parent(self) -> DWARFDie | None: ...
    @property
    def short_name(self) -> str: ...
    @property
    def tag(self) -> str: ...
    @property
    def unit(self) -> DWARFUnit: ...

class DWARFFormValue:
    def as_constant(self) -> int: ...
    def as_referenced_die(self) -> DWARFDie | None: ...
    def as_string(self) -> str: ...
    @property
    def form(self) -> str: ...

class DWARFTypePrinter:
    def __init__(self) -> None: ...
    def __str__(self) -> str: ...
    def append_qualified_name(self, die: DWARFDie) -> None: ...
    def append_scopes(self, die: DWARFDie) -> None: ...
    def append_unqualified_name(self, die: DWARFDie) -> None: ...
    def append_unqualified_name_after(self, die: DWARFDie, inner: DWARFDie) -> None: ...
    def append_unqualified_name_before(self, die: DWARFDie) -> DWARFDie: ...

class DWARFUnit:
    @property
    def compilation_dir(self) -> str: ...
    @property
    def is_type_unit(self) -> bool: ...
    @property
    def length(self) -> int: ...
    @property
    def offset(self) -> int: ...
    @property
    def unit_die(self) -> DWARFDie | None: ...

class InlineAttribute(enum.IntEnum):
    NOT_INLINED = 0
    INLINED = 1
    DECLARED_NOT_INLINED = 2
    DECLARED_INLINED = 2

class VirtualityAttribute(enum.IntEnum):
    NONE = 0
    VIRTUAL = 1
    PURE_VIRTUAL = 2
